/**
 * File:
 *	inst_language.ycp
 *
 * Module:
 *	inst_language.ycp
 *
 * Authors:
 *	Klaus   Kämpf <kkaempf@suse.de>
 *	Michael Hager <mike@suse.de>
 *	Stefan  Hundhammer <sh@suse.de>
 *	Thomas Roelz <tom@suse.de>
 *
 * Summary:
 *	Let the user choose the language.
 *
 * $Id$
 *
 */
{
    textdomain "country";

    import "Mode";
    import "Misc";
    import "Installation";
    import "Console";
    import "Language";
    import "Timezone";
    import "Keyboard";

    import "Wizard";

    /* ----------------------------------------------------------------------
     * Language
     * ----------------------------------------------------------------------*/

    // Check if the current call should be treated as the first run (3rd param).
    // In this case if the user exits with next the the current setting
    // will be made the default that is restored with "Reset to defaults".
    //
    boolean set_default = WFM::Args( 2 );

    y2milestone("set_default: %1", set_default );

    string language = Language::language;

    // Build the contents of the dialog.

    // build up language selection box
    // with the default selection according to Language::language

    // set up selection list with default item

    boolean use_utf8 = true;		// utf8 is default

    if ( ! lookup (UI::GetDisplayInfo(), "HasFullUtf8Support", true ) )
    {
	use_utf8 = false;		// fallback to ascii
    }

    // sort language by ASCII with help of a map
    // $[ "ascii-name" : [ "user-readable-string", "code" ], ...]
    // the "user-readable-string" is either ascii or utf8, depending
    // on HasFullUtf8Support probed above.

    map languageselsort = mapmap(`lang_code, `lang_info, Language::Selection(),
				``([lang_info[1]:"",	// ASCII value is the key
				    [lang_info[use_utf8?0:1]:"", lang_code]
				   ]));

    term languagesel =
      `SelectionBox(`id(`language), `opt(`notify), "",
	maplist (`name, `codelist, languageselsort,
		 ``(`item(`id(codelist[1]:""), codelist[0]:"",
			  (language == codelist[1]:"")))));

   /* ----------------------------------------------------------------------
    * Build dialog
    * ----------------------------------------------------------------------*/

    term heading = `Empty();

    if ( Mode::initial && UI::WidgetExists(`id(`abort) ) && ! Mode::repair )
    {
	// initial heading for language selection
	// (first 'user visible' screen)
	heading = `Heading (_("Welcome to YaST2 -- the SuSE Linux
installation and system administration program.
"));
    }
    else if ( Mode::repair )
    {
	// heading text
	heading = `Heading (_("Welcome to YaST2 System Repair"));
    }
    else
    {
	// heading text
	heading = `Heading (_("Language selection"));
    }

    term contents = `VBox(
			heading,
			`VSpacing(0.7),
			`HBox(
			      `HWeight( 25, `HStretch() ),
			      `HWeight( 50,
					`VBox (
						// label text
					       `Left( `Label ( _("Select your language:") ) ),
					       languagesel
					       )
					),
			      `HWeight( 25, `HStretch() )
			      ),
			`VSpacing(2)
			);

    // Show a Wizardwindow with  that contents. Don't use the Id `next,
    // `back, and `help

    string help_text = "";

    if (Mode::initial)
    {
	// help text for initial (first time) language screen
	help_text = _("<p>
Choose the <b>language</b> to use during installation and for
the installed system.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
Click <b>Accept</b> to proceed to the next dialog.
</p>
");

	// help text, continued
	help_text = help_text + _("<p>
<b><i>Nothing will happen</i></b> to your computer until you confirm
all your settings in the last installation dialog.
</p>
");
	if ( UI::WidgetExists( `id(`abort ) ) )
	    {
	    // help text, continued
	    help_text = help_text + _("<p>
You can select <b>Abort Installation</b> at any time to abort the
installation process.
</p>
");
	    }
    }
    else
    {
	// different help text when called after installation
	// in an installed system
	help_text = _("<p>
Choose the new <b>language</b> for your SuSE Linux system.
</p>\n");
    }

    // Screen title for the first interactive dialog

    Wizard::SetContents( "", contents, help_text, WFM::Args(0), WFM::Args(1));

    if ( !Mode::initial )
    {
	UI::ChangeWidget (`id (`title), `Label, `Empty());
    }

    // Get the user input.
    //
    any ret = nil;

    UI::SetFocus(`id(`language));

    symbol abort_mode = `painless;
    if (Mode::repair)
        abort_mode = `repair;

    repeat
    {
	ret = Wizard::UserInput();
	y2warning( "UserInput() returned %1", ret );

	if ( ret == `abort &&
	     WFM::CallFunction(`inst_confirm_abort(abort_mode) ) )
	{
	    Wizard::RestoreNextButton();
	    return `abort;
	}

	if ( ret == `help )
	{
	    Wizard::ShowHelp( help_text );
	}

	if ( ret == `next || ret == `language )
	{
	    // Get the selected language.
	    //
	    language = UI::QueryWidget(`id(`language), `CurrentItem);

	    if ( language != Language::language )
	    {
		y2milestone( "Language changed from %1 to %2", Language::language, language );

		// popup text
		string msg = _("The language will be changed.

Current keyboard settings can be adapted according
to the new language or they can be kept as they are now.

Adapt keyboard settings?
");

		boolean kbd_adapt = false;

		if( Mode::initial && UI::WidgetExists(`id(`abort) ))
		    {
		    kbd_adapt = true;
		    }
		else 
		    {
		    Timezone::user_decision = true;
		    if( !Mode::normal )
			{
			kbd_adapt = Popup::YesNo( msg );
			}
		    }

		// Set it in the Language module.
		//
		Language::Set( language );

		// Set Console font
		//
		Console::SelectFont( language );

		if( kbd_adapt )
		    {
		    Keyboard::SetKeyboardForLang( language );
		    }
		else
		    {
		    Keyboard::user_decision = true;
		    }

		Installation::encoding = (use_utf8) ? "UTF-8" : Console::encoding;

		// Set it in YaST2
		//
		UI::SetLanguage (language, Installation::encoding);
		WFM::SetLanguage(language, "UTF-8");

		if ( ret != `next )
		{
		    // Display newly translated dialog.
		    //
		    if (UI::WidgetExists(`id(`next)) )		UI::SetFocus(`id(`next));
		    if (UI::WidgetExists(`id(`accept)) )		UI::SetFocus(`id(`accept));
			  
		    return( `again );
		}
	    }

	    if ( ret == `next )
	    {
		// Language has been set already.
		// On first run store users decision as default.
		//
		if ( set_default )
		{
		    y2milestone("Resetting to default language");
		    Language::SetDefault();
		}

		y2milestone ("Language: '%1', Encoding '%2'", language, Installation::encoding);
	    }
	}
    }
    until ( ret == `next || ret == `back );

    // HEAVY UGLINESS  :-((((
    // Restoring in case of `back to be done outside the module because of
    // the retranslation loop in proposal_language.ycp.

    return ret;
}
