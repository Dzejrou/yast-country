/**
 * File:
 *	Timezone.ycp
 *
 * Module:
 *	Timezone
 *
 * Summary:
 *	This module does all timezone related stuff.
 *
 * Depends:
 *	Language
 *
 * Authors:
 *	Klaus Kaempf <kkaempf@suse.de> now maintained by
 *	Thomas Roelz <tom@suse.de>
 *
 * $Id$
 */
{
module "Timezone";
textdomain "country";

import "Arch";
import "Misc";
import "Mode";
import "Language";
import "Storage";

// --------------------------------------------------------------
// START: Globally defined data to be accessed via Timezone::<variable>
// --------------------------------------------------------------

global string timezone = "";	// e.g. "Europe/Berlin"

// hwclock parameter
// possible values:
//	 ""		dont change timezone
//	 "-u"		system clock runs UTC
//   "--localtime"	system clock runs localtime
global string hwclock = "";

// The default timezone if set.
//
global string default_timezone = "";

// Flag indicating if the user has chosen a timezone.
// To be set from outside.
//
global boolean user_decision = false;

// ------------------------------------------------------------------
// END: Globally defined data to be accessed via Timezone::<variable>
// ------------------------------------------------------------------



// ------------------------------------------------------------------
// START: Locally defined data
// ------------------------------------------------------------------

string name = "";

list zonemap = [];
map lang2tz = $[];

// ------------------------------------------------------------------
// END: Locally defined data
// ------------------------------------------------------------------


// ---------------------------------------------------------------------------------------
// START: Globally defined functions
// ---------------------------------------------------------------------------------------

/**
  * Timezone()
  *
  * The module constructor.
  * Sets the proprietary module data defined globally for public access.
  * This is done only once (and automatically) when the module is loaded for the first time.
  * Calls Set() in initial mode.
  * Reads current timezone from sysconfig in normal mode.
  *
  * @param	-
  *
  * @return  -
  *
  * @see	Set()
  */
global define void Timezone()
    ``{
    // Set default values.
    //
    hwclock = "-u";

    if( Mode::initial )
	{
	if( size(Storage::GetWinPrimPartitions(Storage::GetTargetMap())) > 0 ||
	    Arch::board_mac )
	    {
	    // Win partitions present ==> assume local time.
	    //
	    hwclock = "--localtime";
	    y2milestone("Assuming local time");
	    }
	// language --> timezone database, e.g. "de_DE" : "Europe/Berlin"
	//
	map lang2tz = get_lang2tz();

	string new_timezone = lang2tz[Language::language]:"";

	if ( new_timezone != "" )
	    {
	    Set( new_timezone );
	    }
	}
    else if( !Mode::config )
	{
	timezone = Misc::SysconfigRead(.sysconfig.clock.TIMEZONE, timezone );
	default_timezone = 
	    Misc::SysconfigRead(.sysconfig.clock.DEFAULT_TIMEZONE, 
	                        default_timezone);
	hwclock = Misc::SysconfigRead(.sysconfig.clock.HWCLOCK, hwclock);
	}
    return;
    }


/**
 * Set()
 *
 * Set system to selected timezone.
 *
 * @param	string timezone to select, e.g. "Europe/Berlin"
 *
 * @return	the number of the region that contains the timezone
 *
 */
global define integer Set( string zone )
    ``{
    list zmap = get_zonemap();

    // Set the new timezone internally
    timezone = zone;

    integer sel = 0;
    while( sel<size(zmap) && !haskey(zmap[sel,"entries"]:$[], zone) )
	{
	sel = sel + 1;
	}

    textdomain "timezone_db";
    locale translate =  zmap[sel,"name"]:"";
    name = eval(translate);
    name = name + " / ";
    translate = zmap[sel,"entries",timezone]:zone;
    name = name + eval(translate);
    textdomain "country";

    // Adjust system to the new timezone.
    //
    if (!Mode::config)
	SCR::Execute( .target.bash, "/usr/sbin/zic -l " + timezone );

    if ( !Arch::s390 && !Mode::config )
	{
	SCR::Execute(.target.bash, "/sbin/hwclock --hctosys " + hwclock);
	}
    
    // On first assignment store default timezone.
    //
    if( default_timezone == "" )	// not yet assigned
	{
	default_timezone = timezone;
	y2milestone( "Set default timezone: <%1>", timezone );
	}

    y2milestone( "Set timezone:%1 sel:%2 name:%3", timezone, sel, name );

    return( sel );
    }

global define void SetTime( string year, string month, string day, 
                            string hour, string minute, string second )
    ``{
    if ( !Arch::s390 )
	{
	string date = sformat( " --date=\"%1/%2/%3 %4:%5:%6\" ", month, day, 
	                       year, hour, minute, second );
	SCR::Execute(.target.bash, "/sbin/hwclock --set " + hwclock + date);
	SCR::Execute(.target.bash, "/sbin/hwclock --hctosys " + hwclock );
	}
    };


/**
 * MakeProposal()
 *
 * Return proposal string and set system timezone.
 *
 * @param	boolean force_reset
 *		boolean language_changed
 *
 * @return	string	user readable description.
 *		If force_reset is true reset the module to the timezone
 *		stored in default_timezone.
 */

global define string MakeProposal( boolean force_reset, 
                                   boolean language_changed )
    ``{
    y2milestone("force_reset: %1", force_reset);
    y2milestone("language_changed: %1", language_changed);

    if( force_reset )
	{
	// If user wants to reset do it if a default is available.
	//
	if( default_timezone != "" )
	    {
	    Set( default_timezone );	// reset
	    }

	// Reset user_decision flag.
	//
	user_decision = false;
	}
    else	// no reset
	{
	// Only follow the language if the user has never actively chosen
	// a timezone. The indicator for this is user_decision which is
	// set from outside the module.
	//
	if ( user_decision || Mode::autoinst)
	    {
	    if ( language_changed )
		{
		y2milestone("User has chosen a timezone; not following language - only retranslation.");

		Set( timezone );
		}
	    }
	else
	    {
	    // User has not yet chosen a timezone ==> follow language.
	    //
	    string local_timezone = 
		GetTimezoneForLanguage( Language::language, "english-us" );

	    if ( local_timezone != "" )
		{
		Set( local_timezone );
		}
	    else
		{
		if ( language_changed )
		    {
		    y2error("Can't follow language - only retranslation");

		    Set( timezone );
		    }
		}
	    }
	}

    // Clock setting: Abbreviation for Greenwhich mean time
    //
    string clock_setting = _("UTC");

    // Clock setting: local time (not UTC)
    //
    if ( hwclock == "--localtime" ) clock_setting = _("local time");

    // get rid of "&" in text, reuse existing text because of text freeze
    string add_text = deletechars( _("&Hardware clock set to"), "&" );

    clock_setting = deletechars(add_text,":") + " " + clock_setting;

    string date = GetDateTime();

    return( name + " - " + clock_setting + " " + date );
    }

/**
  * Selection()
  *
  * Return a map of ids and names to build up a selection list
  * for the user. The key is used later in the Set function
  * to select this timezone. The name is a translated string.
  *
  * @param	-
  *
  * @return	map	map for timezones 
  *			'timezone_id' is used internally in Set and Probe
  *			functions. 'timezone_name' is a user-readable string.
  *			Uses Language::language for translation.
  * @see Set()
  */

global define list Selection( integer num )
    ``{
    string trans_str = "";
    locale translate = "";
    list zmap = get_zonemap();

    textdomain "timezone_db";
    map tmap = mapmap( `key, `name, zmap[num,"entries"]:$[],
		       ``{
		       translate = name;
		       return [ eval(name), key ];
		       });
    textdomain "country";

    list ret = maplist( `name, `key, tmap,
	``{
	return( `item( `id(key), name, false ));
	});
    return( ret );
    }

global define list Region()
    ``{
    list zmap = get_zonemap();
    string trans_str = "";
    locale translate = "";

    textdomain "timezone_db";
    integer num = -1;
    list ret = maplist( `entry, zmap,
	``{
	translate = entry["name"]:"";
	trans_str = eval(translate);
	num = num + 1;
	return( `item( `id(num), trans_str, false ));
	});
    textdomain "country";
    return( ret );
    }


/**
 * Save()
 *
 * Save timezone to target sysconfig.
 *
 * @param	-
 *
 * @return	-
 */
global define void Save()
    ``{
    if ( Mode::update )
    {
	return;
    }

    SCR::Write(.sysconfig.clock.TIMEZONE, timezone);
    SCR::Write(.sysconfig.clock.DEFAULT_TIMEZONE, default_timezone);
    SCR::Write(.sysconfig.clock.HWCLOCK, hwclock);

    SCR::Write(.sysconfig.clock, nil);	// flush

    y2milestone( "Saved data for timezone: <%1>", timezone );

    return;
    }



/**
 * GetTimezoneForLanguage()
 *
 * Get the timezone for the given system language.
 *
 * @param	System language code, e.g. "en_US".
 *		Default timezone to be returned if nothing found.
 *
 * @return  The timezone for this language, e.g. "english-us"
 *		or the default value if nothing found.
 *
 * @see	-
 */
global define string GetTimezoneForLanguage( string sys_language, 
                                             string default_language )
    ``{
    // The system_language --> timezone conversion map.
    //
    map lang2timezone = get_lang2tz();

    string ret = lang2timezone[sys_language]:"";
    if( size(ret)==0 )
	{
	ret = lang2timezone[default_language]:"US/Pacific";
	}
    y2milestone( "sys %1 def %2 ret %3", sys_language, default_language, ret );
    return ret;
    }



/**
 * GetDateTime()
 *
 * Get the output of /bin/date "+%H:%M:%S - %Y-%m-%d"
 *
 * @param	-
 *
 * @return  The string output.
 *
 * @see	-
 */
global define string GetDateTime()
    ``{
    string local_date = 
	lookup( SCR::Execute( .target.bash_output,
			      "/bin/date \"+%H:%M:%S - %d-%m-%Y\"" ),
			      "stdout", "" );
	
    // cut off LF
    //
    local_date = substring( local_date, 0 , size( local_date ) - 1 );

    return( local_date );
    }

global define map GetDateTimeMap()
    ``{
    map ret = $[];
    list dparts = filter( `v, splitstring( GetDateTime(), " -:" ), 
                          ``(size(v)>0));
    ret["hour"] = dparts[0]:"";
    ret["minute"] = dparts[1]:"";
    ret["second"] = dparts[2]:"";
    ret["day"] = dparts[3]:"";
    ret["month"] = dparts[4]:"";
    ret["year"] = dparts[5]:"";
    y2milestone( "dparts %1 ret %2", dparts, ret );
    return( ret );
    }

global define boolean CheckTime( string hour, string minute, string second )
    ``{
    boolean ret = true;
    integer tmp = tointeger( hour );
    ret = ret && tmp>=0 && tmp<24;
    tmp = tointeger( minute );
    ret = ret && tmp>=0 && tmp<60;
    tmp = tointeger( second );
    ret = ret && tmp>=0 && tmp<60;
    return( ret );
    }

global define boolean CheckDate( string day, string month, string year )
    ``{
    list mdays = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
    boolean ret = true;
    integer year = tointeger( year );
    integer mon = tointeger( month );
    ret = ret && mon>=1 && mon<=12;
    if( year%4==0 && (year%100!=0 || year%400==0))
	{
	mdays[1] = 29;
	}
    integer day = tointeger( day );
    ret = ret && day>=1 && day<=mdays[mon-1]:0;
    ret = ret && year>=1970 && year<2032;
    return( ret );
    }

// ------------------------------------------------------------------
// END: Globally defined functions
// ------------------------------------------------------------------



// ------------------------------------------------------------------
// START: Locally defined functions
// ------------------------------------------------------------------

/*
 * get_zonemap()
 *
 * Get the timezone database.
 *
 * @param	-
 *
 * @return  timezone DB (map)
 *
 * @see	get_lang2tz()
 */

define list get_zonemap()
    ``{
    if( size(zonemap)==0 )
	{
	zonemap = SCR::Read( .target.yast2, "timezone_raw.ycp" );
	if( zonemap == nil ) zonemap = [];
	}
    return( zonemap );
    }	// get_zonemap()



/*
 * get_lang2tz()
 *
 * Get the language --> timezone conversion map.
 *
 * @param	-
 *
 * @return  conversion map
 *
 * @see	get_zonemap()
 */

define map get_lang2tz()
    ``{
    // language --> timezone database, e.g. "de_DE" : "Europe/Berlin"
    //
    if( size(lang2tz)==0 )
	{
	lang2tz = SCR::Read( .target.yast2, "lang2tz.ycp" );
	if( lang2tz == nil ) lang2tz = $[];
	}
    return( lang2tz );
    }	// get_lang2tz()

// ------------------------------------------------------------------
// END: Locally defined functions
// ------------------------------------------------------------------

}

// -EOF-
