/**
 * File:
 *	Timezone.ycp
 *
 * Module:
 *	Timezone
 *
 * Summary:
 *	This module does all timezone related stuff.
 *
 * Depends:
 *	Language
 *
 * Authors:
 *	Klaus Kaempf <kkaempf@suse.de> now maintained by
 *	Thomas Roelz <tom@suse.de>
 *
 * $Id$
 */
{
    module "Timezone";
    textdomain "country";

    import "Arch";
    import "Misc";
    import "Mode";
    import "Language";
    import "Storage";

    // ---------------------------------------------------------------------------------------
    // START: Globally defined data to be accessed via Timezone::<variable>
    // ---------------------------------------------------------------------------------------

    global string timezone = "";	// e.g. "Europe/Berlin"

    global string hwclock = "-u";
                                        

    // The default timezone if set.
    //
    global string default_timezone = "";

    // Flag indicating if the user has chosen a timezone.
    // To be set from outside.
    //
    global boolean user_decision = false;

    // ---------------------------------------------------------------------------------------
    // END: Globally defined data to be accessed via Timezone::<variable>
    // ---------------------------------------------------------------------------------------



    // ---------------------------------------------------------------------------------------
    // START: Locally defined data
    // ---------------------------------------------------------------------------------------

    string name = "";

    // ---------------------------------------------------------------------------------------
    // END: Locally defined data
    // ---------------------------------------------------------------------------------------



    // ---------------------------------------------------------------------------------------
    // START: Globally defined functions
    // ---------------------------------------------------------------------------------------

    /**
     * Timezone()
     *
     * The module constructor.
     * Sets the proprietary module data defined globally for public access.
     * This is done only once (and automatically) when the module is loaded for the first time.
     * Calls Set() in initial mode.
     * Reads current timezone from sysconfig in normal mode.
     *
     * @param	-
     *
     * @return  -
     *
     * @see	Set()
     */
    global define void Timezone()
	``{
	// Set default values.
	//
	if ( size( Storage::GetWinPrimPartitions( Storage::GetTargetMap() ) ) > 0 )
	{
	    // Win partitions present ==> assume local time.
	    //
	    hwclock = "--localtime";	// "--localtime"  	--> local time
	    y2milestone("Assuming local time");
	}
	else
	{
	    // No Win partitions ==> assume UTC.
	    //
	    hwclock = "-u";			// "-u"  	--> UTC
	    y2milestone("Assuming UTC");
	}					// "-u" at least for sparc, iSeries and pSeries

	if ( Mode::initial )
	{
	    // language --> timezone database, e.g. "de_DE" : "Europe/Berlin"
	    //
	    map lang2tz = get_lang2tz();

	    string new_timezone = lang2tz[Language::language]:"";

	    if ( new_timezone != "" )
	    {
		Set( new_timezone );
	    }
	}
	else if ( ! Mode::config )
	{
	    timezone         = Misc::SysconfigRead(.sysconfig.clock.TIMEZONE, timezone );
	    default_timezone = Misc::SysconfigRead(.sysconfig.clock.DEFAULT_TIMEZONE, default_timezone);
	    hwclock          = Misc::SysconfigRead(.sysconfig.clock.GMT, hwclock);
	}
	return;
    }



    /**
     * Set()
     *
     * Set system to selected timezone.
     *
     * @param	string timezone to select, e.g. "Europe/Berlin"
     *
     * @return	-
     *
     */
    global define void Set( string zone )
    ``{
	map zonemap = get_zonemap();

	// Set the new timezone internally
	//
	timezone = zone;

	textdomain "timezone_db";
	locale translate =  zonemap[zone]:zone;
	name = translate;
	textdomain "country";

	// Adjust system to the new timezone.
	//
	SCR::Execute( .target.bash, "/usr/sbin/zic -l " + timezone );

	if ( ! Arch::s390 )
	{
	    SCR::Execute(.target.bash, "/sbin/hwclock_wrapper --hctosys " + hwclock);
	}
	
	// On first assignment store default timezone.
	//
	if ( default_timezone == "" )	// not yet assigned
	{
	    default_timezone = timezone;
	    y2milestone( "Set default timezone: <%1>", timezone );
	}

	y2milestone( "Set timezone: <%1>", timezone );

	return;
    }


    /**
     * MakeProposal()
     *
     * Return proposal string and set system timezone.
     *
     * @param	boolean force_reset
     *		boolean language_changed
     *
     * @return	string	user readable description.
     *		If force_reset is true reset the module to the timezone
     *		stored in default_timezone.
     */

    global define string MakeProposal( boolean force_reset, boolean language_changed )
    ``{
	y2milestone("force_reset: %1", force_reset);
	y2milestone("language_changed: %1", language_changed);

	if ( force_reset )
	{
	    // If user wants to reset do it if a default is available.
	    //
	    if ( default_timezone != "" )
	    {
		Set( default_timezone );	// reset
	    }

	    // Reset user_decision flag.
	    //
	    user_decision = false;
	}
	else	// no reset
	{
	    // Only follow the language if the user has never actively chosen
	    // a timezone. The indicator for this is user_decision which is
	    // set from outside the module.
	    //
	    if ( user_decision || Mode::autoinst)
	    {
		if ( language_changed )
		{
		    y2milestone("User has chosen a timezone; not following language - only retranslation.");

		    Set( timezone );
		}
	    }
	    else
	    {
		// User has not yet chosen a timezone ==> follow language.
		//
		string local_timezone = GetTimezoneForLanguage( Language::language, "english-us" );

		if ( local_timezone != "" )
		{
		    Set( local_timezone );
		}
		else
		{
		    if ( language_changed )
		    {
			y2error("Can't follow language - only retranslation");

			Set( timezone );
		    }
		}
	    }
	}

	// Clock setting: Abbreviation for Greenwhich mean time
	//
	string clock_setting = _("UTC");

	// Clock setting: local time (not UTC)
	//
	if ( hwclock != "-u" ) clock_setting = _("local time");

	string date = GetDateTime();

	return( name + " - " + clock_setting + " : " + date );
    }



    /**
     * Selection()
     *
     * Return a map of ids and names to build up a selection list
     * for the user. The key is used later in the Set function
     * to select this timezone. The name is a translated string.
     *
     * @param	-
     *
     * @return	map	map of $[ timezone_id : timezone_name, ...] for all timezones.
     *			'timezone_id' is used internally in Set and Probe
     *			functions. 'timezone_name' is a user-readable string.
     *			Uses Language::language for translation.
     * @see Set()
     */
    global define map Selection()
    ``{
	map zonemap = get_zonemap();
	locale translate = "";
	string trans_str = "";

	textdomain "timezone_db";
	map ret = mapmap( `key, `languagemap, zonemap,
	``{
	    translate = languagemap;
	    trans_str = translate;
	    return( [ trans_str, key ] );
	});
	textdomain "country";
	return( ret );
    }


    /**
     * Save()
     *
     * Save timezone to target sysconfig.
     *
     * @param	-
     *
     * @return	-
     */
    global define void Save()
    ``{
	if ( Mode::update )
	{
	    return;
	}

	SCR::Write(.sysconfig.clock.TIMEZONE, timezone);
	SCR::Write(.sysconfig.clock.DEFAULT_TIMEZONE, default_timezone);
	SCR::Write(.sysconfig.clock.GMT, hwclock);

	SCR::Write(.sysconfig.clock, nil);	// flush

	y2milestone( "Saved data for timezone: <%1>", timezone );

	return;
    }



    /**
     * GetTimezoneForLanguage()
     *
     * Get the timezone for the given system language.
     *
     * @param	System language code, e.g. "en_US".
     *		Default timezone to be returned if nothing found.
     *
     * @return  The timezone for this language, e.g. "english-us"
     *		or the default value if nothing found.
     *
     * @see	-
     */
    global define string GetTimezoneForLanguage( string sys_language, string default_language )
    ``{
	// The system_language --> timezone conversion map.
	//
	map lang2timezone = get_lang2tz();

	return lang2timezone[sys_language]:default_language;
    }



    /**
     * GetDateTime()
     *
     * Get the output of /bin/date "+%H:%M:%S - %Y-%m-%d"
     *
     * @param	-
     *
     * @return  The string output.
     *
     * @see	-
     */
    global define string GetDateTime()
	``{
	string local_date = lookup( SCR::Execute( .target.bash_output,
						  "/bin/date \"+%H:%M:%S - %Y-%m-%d\"" ),
				    "stdout", "" );
	    
	// cut off LF
	//
	local_date = substring( local_date, 0 , size( local_date ) - 1 );

	return( local_date );
    }

    // ---------------------------------------------------------------------------------------
    // END: Globally defined functions
    // ---------------------------------------------------------------------------------------



    // ---------------------------------------------------------------------------------------
    // START: Locally defined functions
    // ---------------------------------------------------------------------------------------

    /*
     * get_zonemap()
     *
     * Get the timezone database.
     *
     * @param	-
     *
     * @return  timezone DB (map)
     *
     * @see	get_lang2tz()
     */

    define map get_zonemap()
	``{
	map zonemap = SCR::Read( .target.yast2, "timezone_raw.ycp" );

	if ( zonemap == nil ) zonemap = $[];

	return( zonemap );
    }	// get_zonemap()



    /*
     * get_lang2tz()
     *
     * Get the language --> timezone conversion map.
     *
     * @param	-
     *
     * @return  conversion map
     *
     * @see	get_zonemap()
     */

    define map get_lang2tz()
	``{
	// language --> timezone database, e.g. "de_DE" : "Europe/Berlin"
	//
	map lang2tz = SCR::Read( .target.yast2, "lang2tz.ycp" );

	if ( lang2tz == nil ) lang2tz = $[];

	return( lang2tz );
    }	// get_lang2tz()

    // ---------------------------------------------------------------------------------------
    // END: Locally defined functions
    // ---------------------------------------------------------------------------------------

}

// -EOF-
